import asyncio
import hashlib
import hmac
import io
import json
import os
import platform
import shutil
import sys
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile, FSInputFile
from contextlib import asynccontextmanager
from datetime import datetime, timedelta
from fastapi import BackgroundTasks
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Request, HTTPException, Depends, Response, UploadFile, \
    File, Query
from fastapi.responses import HTMLResponse, JSONResponse, StreamingResponse, FileResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from telegram import WebAppData
from typing import Optional, List
from urllib.parse import parse_qs

import database as db
from ai_integration import get_ai_response
from config import MANAGER_GROUP_CHAT_ID, TELEGRAM_BOT_TOKEN
from config import logger
from minio_storage import minio_storage
from models import UserInfo, Message as DbMessage, Chat, WebSocketMessage, MediaContent
from telegram_bot import notify_managers_new_request, bot as tg_bot, create_manager_chat_topic
from utils import cleanup_chat_files
from websocket_manager import manager as ws_manager


def get_windows_version():
    try:
        return platform.system(), platform.release()
    except:
        return "Windows", "10"


@asynccontextmanager
async def lifespan(app: FastAPI):
    try:

        await db.connect_db()
        from telegram_bot import run_bot
        loop = asyncio.get_running_loop()
        loop.create_task(run_bot())
        logger.info("FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ, –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.")

        yield

        await db.close_db()
        logger.info("FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ lifespan: {e}")
        raise


app = FastAPI(title="VROOM Chat Service", lifespan=lifespan)

templates = Jinja2Templates(directory="templates")
app.mount("/static", StaticFiles(directory="static"), name="static")

MAX_FILE_SIZE = 250 * 1024 * 1024
ALLOWED_FILE_TYPES = {'image/jpeg': '.jpg', 'image/png': '.png', 'image/gif': '.gif', 'application/pdf': '.pdf',
    'application/msword': '.doc', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
    'application/vnd.ms-excel': '.xls', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': '.xlsx',
    'text/plain': '.txt', 'video/quicktime': '.mov', 'video/mp4': '.mp4'}


async def get_user_from_query(user_id: int, user_name: Optional[str] = None) -> db.User:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–∑ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞."""
    user = await db.find_or_create_user(user_id, user_name)
    if not user:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id}")
        raise HTTPException(status_code=500, detail="Failed to process user information")
    return user


@app.get("/", response_class=HTMLResponse)
async def get_chat_page(request: Request):
    """–û—Ç–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–∞—Ç–∞"""

    return templates.TemplateResponse("chat.html", {"request": request})


@app.post("/chat/{chat_id}/feedback", status_code=200)
async def handle_feedback(chat_id: str, data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–Ø –¥–æ–≤–æ–ª–µ–Ω –æ—Ç–≤–µ—Ç–æ–º'"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω feedback –¥–ª—è —á–∞—Ç–∞ {chat_id}: {data}")
    action = data.get("action")

    if action == "satisfied":
        chat = await db.get_chat_by_id(chat_id)
        if not chat:
            raise HTTPException(status_code=404, detail="Chat not found")
        if chat.status == "closed":
            logger.info(f"–ß–∞—Ç {chat_id} —É–∂–µ –±—ã–ª –∑–∞–∫—Ä—ã—Ç.")
            return {"message": "Chat already closed"}

        success = await db.update_chat_status(chat_id, "closed")
        if success:
            logger.info(f"–ß–∞—Ç {chat_id} –∑–∞–∫—Ä—ã—Ç –ø–æ –∫–Ω–æ–ø–∫–µ '–Ø –¥–æ–≤–æ–ª–µ–Ω –æ—Ç–≤–µ—Ç–æ–º'.")

            await ws_manager.send_personal_message({"type": "status_update", "payload": {"status": "closed",
                                                                                         "message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!",
                                                                                         "show_new_chat_button": True,
                                                                                         "chat_id": chat_id}},
                chat.user_id)
            return {"message": "Chat closed successfully"}
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —á–∞—Ç {chat_id} –ø–æ –∫–Ω–æ–ø–∫–µ '–Ø –¥–æ–≤–æ–ª–µ–Ω –æ—Ç–≤–µ—Ç–æ–º'.")
            raise HTTPException(status_code=500, detail="Failed to close chat")
    else:
        raise HTTPException(status_code=400, detail="Invalid action")


@app.post("/chat/{chat_id}/request_manager")
async def handle_request_manager(chat_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫ —á–∞—Ç—É"""

    chat = await db.get_chat_by_id(chat_id)
    if not chat:
        raise HTTPException(status_code=404, detail="–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    old_topic_id = None
    try:
        if chat.status == "closed":

            old_topic_id = chat.topic_id
            if old_topic_id:
                try:

                    await tg_bot.get_forum_topic(MANAGER_GROUP_CHAT_ID, old_topic_id)

                    topic = await tg_bot.get_forum_topic(MANAGER_GROUP_CHAT_ID, old_topic_id)
                    current_name = topic.name.replace('[–ó–ê–ö–†–´–¢] ', '')

                    await tg_bot.edit_forum_topic(MANAGER_GROUP_CHAT_ID, old_topic_id, name=f"[–ê–ö–¢–ò–í–ï–ù] {current_name}")
                    logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ {old_topic_id} –¥–ª—è —á–∞—Ç–∞ {chat_id} –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π")

                    await tg_bot.send_message(MANAGER_GROUP_CHAT_ID, "üîÑ –ß–∞—Ç –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç –∫–ª–∏–µ–Ω—Ç–æ–º",
                        message_thread_id=old_topic_id)

                    await db.reopen_chat(chat_id, old_topic_id)

                    await ws_manager.send_personal_message({"type": "status_update", "payload": {
                        "message": "–ß–∞—Ç –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", "chat_id": chat_id}}, chat.user_id)
                    return {"status": "success", "message": "–ß–∞—Ç –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç"}
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å —Ç–æ–ø–∏–∫ {old_topic_id}: {e}")

                    old_topic_id = None

            await db.reopen_chat(chat_id)
            chat.status = "active"
            chat.manager_requested = False
            chat.topic_id = None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/–ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞: {e}")

    user = await db.get_user(chat.user_id)
    if not user:
        logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat.user_id} –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        raise HTTPException(status_code=500, detail="User not found for the chat")

    if not chat.topic_id:
        topic = await create_manager_chat_topic(user, chat)
        if not topic:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ø–∏–∫ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            await ws_manager.send_personal_message({"type": "error", "payload": {
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", "chat_id": chat_id}},
                chat.user_id)
            raise HTTPException(status_code=500, detail="Failed to create topic")
        chat.topic_id = topic.message_thread_id

    history = await db.get_chat_history(chat_id, limit=250)
    first_message_text = history[0].text if history else "–ö–ª–∏–µ–Ω—Ç –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ü–æ–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞'"

    success = await notify_managers_new_request(user, chat, first_message_text, chat.topic_id)
    if not success:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –¥–ª—è —á–∞—Ç–∞ {chat_id}")

        await ws_manager.send_personal_message({"type": "error", "payload": {
            "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", "chat_id": chat_id}},
            chat.user_id)
        return {"status": "warning", "message": "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"}

    await ws_manager.send_personal_message({"type": "status_update",
        "payload": {"message": f"–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", "chat_id": chat_id,
            "user_info": {"user_id": user.user_id, "user_name": user.user_name, "language": user.language,
                "currency": user.currency}}}, chat.user_id)

    success = await db.set_manager_requested(chat_id, topic_id=chat.topic_id)
    if not success:
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞")

    return {"status": "success", "message": "–ó–∞–ø—Ä–æ—Å –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"}


@app.get("/api/media/{file_path:path}")
async def get_media(file_path: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ–¥–∏–∞-—Ñ–∞–π–ª –∏–∑ MinIO"""
    try:

        presigned_url = minio_storage.get_presigned_url(file_path)

        return RedirectResponse(url=presigned_url)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")


@app.post("/upload")
async def upload_file(request: Request, file: UploadFile = File(...)):
    try:

        chat_id = request.query_params.get("chat_id")
        message = request.query_params.get("message")
        sender_id = request.query_params.get("sender_id")

        logger.info(f"–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞. chat_id: {chat_id}, filename: {file.filename}")

        if not chat_id:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chat_id")
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω ID —á–∞—Ç–∞")

        if not message:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç message")
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")

        if not sender_id:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç sender_id")
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")

        file_size = 0
        chunk_size = 1024
        while chunk := await file.read(chunk_size):
            file_size += len(chunk)
            if file_size > MAX_FILE_SIZE:
                logger.warning(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –±–∞–π—Ç")
                raise HTTPException(status_code=400, detail=f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç {MAX_FILE_SIZE / 1024 / 1024}MB")
        await file.seek(0)

        if file.content_type not in ALLOWED_FILE_TYPES:
            logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file.content_type}")
            raise HTTPException(status_code=400,
                detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(ALLOWED_FILE_TYPES.keys())}")

        temp_file = io.BytesIO()
        while chunk := await file.read(chunk_size):
            temp_file.write(chunk)
        temp_file.seek(0)

        minio_path = f"{chat_id}/{file.filename}"

        try:

            minio_storage.client.put_object(minio_storage.bucket_name, minio_path, temp_file, file_size,
                content_type=file.content_type)

            presigned_url = minio_storage.get_presigned_url(minio_path)

            message_data = json.loads(message)
            text = message_data.get("payload", {}).get("text", "")

            media_type = "photo" if file.content_type.startswith("image/") else "video" if file.content_type.startswith(
                "video/") else "voice" if file.content_type.startswith("audio/") else "document"

            media = MediaContent(type=media_type, file_id=minio_path, mime_type=file.content_type, file_size=file_size)

            db_message = DbMessage(chat_id=chat_id, sender_id=sender_id, text=text, media=media)
            await db.add_message(db_message)

            return {"success": True, "file_url": presigned_url, "file_path": minio_path,
                "message_id": str(db_message.id)}

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ MinIO: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        await file.close()


@app.post("/chat/{chat_id}/take")
async def handle_take_chat(chat_id: str, manager_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∑—è—Ç–∏—è —á–∞—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""

    chat = await db.get_chat_by_id(chat_id)
    if not chat:
        raise HTTPException(status_code=404, detail="–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if chat.status == "closed":
        raise HTTPException(status_code=400, detail="–ß–∞—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç")
    if not chat.manager_requested:
        raise HTTPException(status_code=400, detail="–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –±—ã–ª –∑–∞–ø—Ä–æ—à–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞")
    if chat.manager_id:
        raise HTTPException(status_code=400, detail="–ß–∞—Ç —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")

    manager = await db.get_user(manager_id)
    if not manager:
        raise HTTPException(status_code=404, detail="–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    success = await db.set_chat_manager(chat_id, manager_id)
    if not success:
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞")

    await ws_manager.send_personal_message({"type": "status_update",
        "payload": {"message": f"–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —á–∞—Ç—É", "chat_id": chat_id, "manager": {"id": manager_id,

        }}}, chat.user_id)

    return {"status": "success", "message": "–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤–∑—è—Ç"}


@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    try:

        init_data = websocket.query_params.get("initData")
        if not init_data:
            logger.warning("WebSocket: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç InitData")
            await websocket.close(code=1008)
            return

        try:

            parsed_data = parse_qs(init_data)

            if 'hash' not in parsed_data or 'user' not in parsed_data:
                logger.warning("WebSocket: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –≤ InitData")
                await websocket.close(code=1008)
                return

            received_hash = parsed_data['hash'][0]
            user_data = json.loads(parsed_data['user'][0])

            check_string = []
            for key, value in parsed_data.items():
                if key != 'hash':
                    if isinstance(value, list):
                        check_string.append(f"{key}={value[0]}")
                    else:
                        check_string.append(f"{key}={value}")
            check_string = '\n'.join(sorted(check_string))

            secret_key = hmac.new("WebAppData".encode(), TELEGRAM_BOT_TOKEN.encode(), hashlib.sha256).digest()

            computed_hash = hmac.new(secret_key, check_string.encode(), hashlib.sha256).hexdigest()

            if computed_hash != received_hash:
                logger.warning("WebSocket: –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å InitData")
                await websocket.close(code=1008)
                return

            user_id = user_data['id']
            user_name = user_data.get('username', '')
            if not user_name:
                user_name = user_data.get('first_name', '')
                if 'last_name' in user_data:
                    user_name += f" {user_data['last_name']}"

            logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç user_id={user_id}, user_name={user_name}")

            try:
                user = await get_user_from_query(user_id, user_name)
                logger.info(f"WebSocket: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_id} ({user.user_name}) –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.")
            except HTTPException as e:
                logger.warning(f"WebSocket: –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}. –î–µ—Ç–∞–ª–∏: {e.detail}")
                await websocket.close(code=1008)
                return
            except Exception as e:
                logger.error(f"WebSocket: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await websocket.close(code=1011)
                return

            await ws_manager.connect(websocket, user.user_id)

            chat = await db.get_active_chat(user.user_id)
            current_chat_id = None
            print(f"chat: {chat}")
            if chat:
                logger.info(
                    f"–ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç {chat.chat_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}, —Å—Ç–∞—Ç—É—Å: {chat.status}")

                if chat.status == "closed":
                    await db.reai_pending_chat(chat.chat_id)

                current_chat_id = chat.chat_id

                history = await db.get_chat_history(chat.chat_id, for_manager=False)
                history_payload = []

                for msg in history:
                    msg_data = {"text": msg.text, "sender_id": msg.sender_id, "timestamp": msg.timestamp.isoformat(), }

                    if msg.media:
                        msg_data["media"] = msg.media.dict()

                    history_payload.append(msg_data)

                show_buttons = False
                if history and history[-1].sender_id == "ai":
                    show_buttons = True

                await ws_manager.send_personal_message({"type": "init",
                                                        "payload": {"chat_id": chat.chat_id, "history": history_payload,
                                                            "status": chat.status, "show_buttons": show_buttons}},
                    user.user_id)
            else:

                logger.info(
                    f"–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")

                await ws_manager.send_personal_message(
                    {"type": "init", "payload": {"chat_id": None, "history": [], "status": "no_chat"}}, user.user_id)

            try:
                while True:
                    data = await websocket.receive_text()
                    logger.debug(f"WebSocket: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.user_id}: {data}")
                    try:
                        message_data = json.loads(data)

                        if "type" not in message_data or "payload" not in message_data:
                            raise ValueError("Invalid message format")

                        if message_data["type"] == "message":
                            text = message_data["payload"].get("text", "")
                            file_info = message_data["payload"].get("file")

                            if file_info:

                                logger.debug(
                                    "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ WebSocket, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ upload_file")

                                last_message = await db.get_last_message(current_chat_id)
                                if last_message and last_message.media:

                                    await ws_manager.send_personal_message({"type": "message",
                                        "payload": {"chat_id": current_chat_id, "sender_id": str(user.user_id),
                                            "text": text, "timestamp": last_message.timestamp.isoformat(),
                                            "media": last_message.media.dict()}}, user.user_id)

                                    if chat.status == "active" and chat.topic_id:
                                        try:

                                            message_text = f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ({user.user_name}):</b>\n{text}"

                                            close_button = InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç",
                                                                                callback_data=f"closechat_{chat.chat_id}")
                                            keyboard = InlineKeyboardMarkup(inline_keyboard=[[close_button]])

                                            file_url = minio_storage.get_presigned_url(last_message.media.file_id)

                                            if last_message.media.type == "photo":
                                                await tg_bot.send_photo(chat_id=MANAGER_GROUP_CHAT_ID, photo=file_url,
                                                    caption=message_text, message_thread_id=chat.topic_id,
                                                    parse_mode="HTML", reply_markup=keyboard)
                                            elif last_message.media.type == "video":
                                                await tg_bot.send_video(chat_id=MANAGER_GROUP_CHAT_ID, video=file_url,
                                                    caption=message_text, message_thread_id=chat.topic_id,
                                                    parse_mode="HTML", reply_markup=keyboard)
                                            elif last_message.media.type == "voice":
                                                await tg_bot.send_voice(chat_id=MANAGER_GROUP_CHAT_ID, voice=file_url,
                                                    caption=message_text, message_thread_id=chat.topic_id,
                                                    parse_mode="HTML", reply_markup=keyboard)
                                            elif last_message.media.type == "document":
                                                await tg_bot.send_document(chat_id=MANAGER_GROUP_CHAT_ID,
                                                    document=file_url, caption=message_text,
                                                    message_thread_id=chat.topic_id, parse_mode="HTML",
                                                    reply_markup=keyboard)

                                            logger.info(
                                                f"–ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {user.user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
                                        except Exception as e:
                                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {e}")
                            else:

                                if not current_chat_id:

                                    existing_chat = await db.get_active_chat(user.user_id)
                                    if existing_chat:
                                        current_chat_id = existing_chat.chat_id

                                        if existing_chat.status == "closed":
                                            await db.reopen_chat(current_chat_id)
                                    else:

                                        chat = await db.create_chat(user.user_id)
                                        current_chat_id = chat.chat_id

                                    ai_response = await get_ai_response(text)

                                    client_msg = DbMessage(chat_id=current_chat_id, sender_id=str(user.user_id),
                                        text=text)
                                    await db.add_message(client_msg)

                                    if ai_response:

                                        ai_msg = DbMessage(chat_id=current_chat_id, sender_id="ai", text=ai_response)
                                        await db.add_message(ai_msg)

                                        await ws_manager.send_personal_message({"type": "ai_response",
                                            "payload": {"chat_id": current_chat_id, "sender_id": "ai",
                                                "text": ai_response, "timestamp": ai_msg.timestamp.isoformat(),
                                                "show_buttons": True}}, user.user_id)
                                    else:

                                        error_message = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ–∑–æ–≤–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."
                                        await ws_manager.send_personal_message({"type": "error",
                                            "payload": {"chat_id": current_chat_id, "message": error_message,
                                                "show_operator_button": True}}, user.user_id)
                                else:

                                    chat = await db.get_chat_by_id(current_chat_id)
                                    if not chat or chat.status == "closed":
                                        logger.warning(
                                            f"WebSocket: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç {current_chat_id} –æ—Ç {user.user_id}")

                                        await ws_manager.send_personal_message({"type": "error", "payload": {
                                            "message": "–¢–µ–∫—É—â–∏–π —á–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç.",
                                            "show_new_chat_button": True, "chat_id": current_chat_id}}, user.user_id)
                                        current_chat_id = None
                                        continue

                                    client_msg = DbMessage(chat_id=current_chat_id, sender_id=str(user.user_id),
                                                           text=text)
                                    await db.add_message(client_msg)

                                    if chat.status == "ai_pending":

                                        ai_response = await get_ai_response(text)

                                        if ai_response:

                                            ai_msg = DbMessage(chat_id=current_chat_id, sender_id="ai",
                                                               text=ai_response)
                                            await db.add_message(ai_msg)

                                            await ws_manager.send_personal_message({"type": "ai_response",
                                                "payload": {"chat_id": current_chat_id, "sender_id": "ai",
                                                    "text": ai_response, "timestamp": ai_msg.timestamp.isoformat(),
                                                    "show_buttons": True}}, user.user_id)
                                        else:

                                            error_message = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ–∑–æ–≤–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."
                                            await ws_manager.send_personal_message({"type": "error",
                                                "payload": {"chat_id": current_chat_id, "message": error_message,
                                                    "show_operator_button": True}}, user.user_id)

                                    elif chat.status == "active" and chat.topic_id:
                                        try:

                                            message_text = f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ({user.user_name}):</b>\n{text}"

                                            close_button = InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç",
                                                                                callback_data=f"closechat_{chat.chat_id}")
                                            keyboard = InlineKeyboardMarkup(inline_keyboard=[[close_button]])

                                            await tg_bot.send_message(chat_id=MANAGER_GROUP_CHAT_ID, text=message_text,
                                                message_thread_id=chat.topic_id, parse_mode="HTML",
                                                reply_markup=keyboard)
                                            logger.info(
                                                f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {user.user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
                                        except Exception as e:
                                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {e}")

                        elif message_data["type"] == "start_new_chat":

                            logger.info(f"WebSocket: –ö–ª–∏–µ–Ω—Ç {user.user_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –Ω–æ–≤—ã–π —á–∞—Ç.")

                            chat = await db.get_active_chat(user.user_id)
                            await db.reai_pending_chat(chat.chat_id)

                            await ws_manager.send_personal_message({"type": "init",
                                                                    "payload": {"chat_id": chat.chat_id, "history": [],
                                                                                "status": "ai_pending"}}, user.user_id)
                        elif message_data["type"] == "message":
                            text = message_data["payload"].get("text", "")
                            file_info = message_data["payload"].get("file")
                            chat_id = message_data["payload"].get("chat_id")

                            if chat_id != current_chat_id:
                                logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —á–∞—Ç–∞ {chat_id}, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
                                chat = await db.create_chat(user.user_id)
                                current_chat_id = chat.chat_id



                    except json.JSONDecodeError:
                        logger.warning(f"WebSocket: –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ JSON –¥–∞–Ω–Ω—ã–µ –æ—Ç {user.user_id}: {data}")
                    except ValueError as e:
                        logger.warning(f"WebSocket: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user.user_id}: {e} | –î–∞–Ω–Ω—ã–µ: {data}")
                    except Exception as e:
                        logger.error(f"WebSocket: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user.user_id}: {e}")

                        await ws_manager.send_personal_message({"type": "error",
                                                                "payload": {"message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                                                                            "chat_id": current_chat_id}}, user.user_id)

            except WebSocketDisconnect:
                logger.info(f"WebSocket: –ö–ª–∏–µ–Ω—Ç {user.user_id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")
                ws_manager.disconnect(user.user_id)
            except Exception as e:
                logger.error(f"WebSocket: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å {user.user_id}: {e}")
                ws_manager.disconnect(user.user_id)

                try:
                    await websocket.close(code=1011)
                except RuntimeError:
                    pass

        except json.JSONDecodeError:
            logger.error("WebSocket: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await websocket.close(code=1008)
            return
        except Exception as e:
            logger.error(f"WebSocket: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ InitData: {e}")
            await websocket.close(code=1008)
            return

    except Exception as e:
        logger.error(f"WebSocket: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏: {e}")
        await websocket.close(code=1011)
        return


if __name__ == "__main__":
    import uvicorn

    logger.info("–ó–∞–ø—É—Å–∫ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Uvicorn...")
    uvicorn.run("main:app", host=os.getenv("HOST", "0.0.0.0"), port=int(os.getenv("PORT", "8000")), reload=True)


async def send_history_to_topic(topic_id: int, history: List[dict]):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ —Ç–æ–ø–∏–∫"""
    try:
        formatted_history = []
        for msg in history:
            if msg["type"] == "user":
                formatted_history.append(f"üë§ –ö–ª–∏–µ–Ω—Ç: {msg['text']}")
            elif msg["type"] == "system":
                formatted_history.append(f"ü§ñ –°–∏—Å—Ç–µ–º–∞: {msg['text']}")
            elif msg["type"] == "manager":
                formatted_history.append(f"üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä: {msg['text']}")

        if formatted_history:
            history_text = "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:\n\n" + "\n\n".join(formatted_history)
            await tg_bot.send_message(chat_id=MANAGER_GROUP_CHAT_ID, message_thread_id=topic_id, text=history_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ç–æ–ø–∏–∫ {topic_id}: {str(e)}")
