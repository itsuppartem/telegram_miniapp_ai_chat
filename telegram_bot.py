import aiofiles
import asyncio
import io
import json
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, \
    ForumTopic, FSInputFile
from collections import defaultdict
from datetime import datetime, timedelta, timezone
from typing import Optional

import database as db
from config import TELEGRAM_BOT_TOKEN, MANAGER_GROUP_CHAT_ID, logger, ADMIN_USER_ID
from minio_storage import minio_storage
from models import Chat, Message as DbMessage, MediaContent
from utils import cleanup_chat_files
from websocket_manager import manager as ws_manager

bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"), parse_mode=ParseMode.HTML)
dp = Dispatcher()

message_counts = defaultdict(int)
last_reset = datetime.now(timezone.utc)


async def check_message_rate_limit(chat_id: int) -> bool:
    global last_reset
    if datetime.now(timezone.utc) - last_reset > timedelta(minutes=1):
        message_counts.clear()
        last_reset = datetime.now(timezone.utc)
    if message_counts[chat_id] >= 4:
        return False
    message_counts[chat_id] += 1
    return True


async def send_message_with_rate_limit(chat_id: int, text: str, **kwargs):
    if not await check_message_rate_limit(chat_id):
        logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        return False
    try:
        await asyncio.sleep(15)
        await bot.send_message(chat_id, text, **kwargs)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False


async def download_file_from_telegram(file_id: str, destination: str) -> bool:
    try:
        file = await bot.get_file(file_id)
        if not file:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ {file_id}")
            return False
        file_content = await bot.download_file(file.file_path)
        async with aiofiles.open(destination, 'wb') as f:
            await f.write(file_content.read())
        logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {destination}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_id}: {e}")
        return False


async def notify_client_chat_closed(user_id: int, chat_id: str):
    message_data = {"type": "status_update",
        "payload": {"status": "closed", "message": "–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.", "show_new_chat_button": True,
            "chat_id": chat_id}}
    await ws_manager.send_personal_message(message_data, user_id)


async def send_message_to_client_ws(user_id: int, text: str, chat_id: str, manager_id: int):
    message_data = {"type": "message", "payload": {"sender_id": str(manager_id), "sender_type": "manager", "text": text,
        "timestamp": datetime.now(timezone.utc).isoformat(), "chat_id": chat_id}}
    await ws_manager.send_personal_message(message_data, user_id)


async def create_manager_chat_topic(user: db.User, chat: db.Chat) -> Optional[ForumTopic]:
    if not MANAGER_GROUP_CHAT_ID:
        logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ø–∏–∫: MANAGER_GROUP_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω.")
        return None
    try:
        topic_name = f"[–ê–ö–¢–ò–í–ï–ù] {user.user_name} (ID: {user.user_id})"
        topic = await bot.create_forum_topic(chat_id=MANAGER_GROUP_CHAT_ID, name=topic_name[:100])
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ç–æ–ø–∏–∫ {topic.message_thread_id} –¥–ª—è —á–∞—Ç–∞ {chat.chat_id} —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.user_id}")
        return topic
    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞ –¥–ª—è —á–∞—Ç–∞ {chat.chat_id}: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞: {e}")
    return None


async def send_history_to_topic(topic_id: int, chat_id: str):
    if not MANAGER_GROUP_CHAT_ID: return

    history = await db.get_chat_history(chat_id, limit=250, for_manager=True)
    if not history:
        await send_message_with_rate_limit(MANAGER_GROUP_CHAT_ID, "–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø—É—Å—Ç–∞.",
                                           message_thread_id=topic_id)
        return

    temp_file = None
    try:
        temp_file = f"history_{chat_id}_{datetime.now(timezone.utc).strftime('%Y%m%d_%H%M%S')}.txt"
        with open(temp_file, 'w', encoding='utf-8') as f:
            f.write(f"üìú –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}:\n\n")
            for msg in history:
                sender = f"üë§ –ö–ª–∏–µ–Ω—Ç ({msg.sender_id})" if str(
                    msg.sender_id).isdigit() else f"üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä ({msg.sender_id})" if str(
                    msg.sender_id).isdigit() and int(msg.sender_id) == history[
                                                                                           0].sender_id else "ü§ñ AI" if msg.sender_id == "ai" else f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ({msg.sender_id})"
                timestamp_str = msg.timestamp.strftime('%Y-%m-%d %H:%M:%S UTC')
                message_text = f"{sender} [{timestamp_str}]:\n{msg.text}\n"
                if msg.media:
                    message_text += f"üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª: {msg.media.type}\n"
                    if msg.media.caption:
                        message_text += f"–ü–æ–¥–ø–∏—Å—å: {msg.media.caption}\n"
                f.write(message_text + "\n")
        await bot.send_document(chat_id=MANAGER_GROUP_CHAT_ID,
            document=FSInputFile(temp_file, filename=f"history_{chat_id}.txt"),
            caption=f"üìú –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}", message_thread_id=topic_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")
        await send_message_with_rate_limit(MANAGER_GROUP_CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {str(e)}",
            message_thread_id=topic_id)
    finally:
        if temp_file and os.path.exists(temp_file):
            try:
                os.remove(temp_file)
                logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_file} —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {temp_file}: {e}")


@dp.message(CommandStart())
async def send_welcome(message: Message):
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    await db.find_or_create_user(user_id, user_name)
    web_app_url = os.getenv("WEB_APP_URL")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç –í–ê–®–ê –ö–û–ú–ü–ê–ù–ò–Ø", web_app=types.WebAppInfo(url=web_app_url))]])
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–∞—Ç.", reply_markup=keyboard)


@dp.message(Command("addmanager"))
async def add_manager_command(message: Message):
    if str(message.from_user.id) != db.ADMIN_USER_ID:
        return await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    args = message.text.split()
    if len(args) < 2 or not args[1].isdigit():
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addmanager <user_id> [–ò–º—è]")
    manager_id = int(args[1])
    manager_name = " ".join(args[2:]) if len(args) > 2 else None
    if await db.is_manager(manager_id):
        return await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {manager_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
    await db.add_manager(manager_id, manager_name)
    await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {manager_id} ({manager_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")


@dp.message(F.chat.id == MANAGER_GROUP_CHAT_ID, F.message_thread_id)
async def handle_manager_message(message: types.Message):
    manager_id = int(message.from_user.id)
    if not await db.is_manager(manager_id):
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {manager_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
        return
    chat = await db.get_chat_by_topic_id(message.message_thread_id)
    if not chat:
        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω —á–∞—Ç –¥–ª—è —Ç–æ–ø–∏–∫–∞ {message.message_thread_id}")
        return
    if not chat.manager_id and chat.manager_requested == True:
        try:
            from main import handle_take_chat
            await handle_take_chat(chat.chat_id, manager_id)
            logger.info(f"–ß–∞—Ç {chat.chat_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∑—è—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {manager_id} –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤–∑—è—Ç–∏–∏ —á–∞—Ç–∞ {chat.chat_id}: {e}")
            return
    db_message = DbMessage(chat_id=chat.chat_id, sender_id=str(manager_id), text=message.text or message.caption)
    if message.photo:
        file_id = message.photo[-1].file_id
        file_name = f"{chat.chat_id}_{datetime.now(timezone.utc).timestamp()}.jpg"
        minio_path = f"{chat.chat_id}/{file_name}"
        db_message.media = MediaContent(type="photo", file_id=minio_path, caption=message.caption,
            width=message.photo[-1].width, height=message.photo[-1].height)
    elif message.video:
        file_id = message.video.file_id
        file_name = f"{chat.chat_id}_{datetime.now(timezone.utc).timestamp()}.mp4"
        minio_path = f"{chat.chat_id}/{file_name}"
        db_message.media = MediaContent(type="video", file_id=minio_path, caption=message.caption,
            mime_type=message.video.mime_type, file_size=message.video.file_size, duration=message.video.duration,
            width=message.video.width, height=message.video.height)
    elif message.voice:
        file_id = message.voice.file_id
        file_name = f"{chat.chat_id}_{datetime.now(timezone.utc).timestamp()}.ogg"
        minio_path = f"{chat.chat_id}/{file_name}"
        db_message.media = MediaContent(type="voice", file_id=minio_path, mime_type=message.voice.mime_type,
            file_size=message.voice.file_size, duration=message.voice.duration)
    elif message.video_note:
        file_id = message.video_note.file_id
        file_name = f"{chat.chat_id}_{datetime.now(timezone.utc).timestamp()}.mp4"
        minio_path = f"{chat.chat_id}/{file_name}"
        db_message.media = MediaContent(type="video_note", file_id=minio_path, file_size=message.video_note.file_size,
            duration=message.video_note.duration)
    elif message.document:
        file_id = message.document.file_id
        file_name = f"{chat.chat_id}_{message.document.file_name}"
        minio_path = f"{chat.chat_id}/{file_name}"
        db_message.media = MediaContent(type="document", file_id=minio_path, caption=message.caption,
            mime_type=message.document.mime_type, file_size=message.document.file_size)
    if db_message.media and file_id:
        try:
            file = await bot.get_file(file_id)
            file_content = await bot.download_file(file.file_path)
            file_bytes = file_content.read()
            minio_storage.client.put_object(minio_storage.bucket_name, minio_path, io.BytesIO(file_bytes),
                len(file_bytes), content_type=db_message.media.mime_type)
            logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ MinIO: {minio_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ MinIO: {e}")
            return
    await db.add_message(db_message)
    message_data = {"type": "message",
        "payload": {"chat_id": chat.chat_id, "sender_id": str(manager_id), "sender_type": "manager",
            "text": db_message.text, "timestamp": db_message.timestamp.isoformat()}}
    if db_message.media:
        message_data["payload"]["media"] = db_message.media.dict()
    await ws_manager.send_personal_message(message_data, chat.user_id)


@dp.callback_query(F.data.startswith("takechat_"))
async def handle_take_chat(callback_query: types.CallbackQuery):
    try:
        manager_id = callback_query.from_user.id
        if not await db.is_manager(manager_id):
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤–∑—è—Ç—å —á–∞—Ç –Ω–µ-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {manager_id}")
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
            return
        chat_id = int(callback_query.data.split(":")[1])
        chat = await db.get_chat_by_id(chat_id)
        if not chat:
            logger.error(f"–ß–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback_query.answer("–û—à–∏–±–∫–∞: —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        if chat.manager_id and chat.manager_id != manager_id:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤–∑—è—Ç—å —á–∞—Ç {chat_id}, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
            await callback_query.answer("–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", show_alert=True)
            return
        if chat.status not in ["manager_requested", "active"]:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤–∑—è—Ç—å —á–∞—Ç {chat_id} –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ: {chat.status}")
            await callback_query.answer("–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", show_alert=True)
            return
        user = await db.get_user_by_id(chat.user_id)
        if not user:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback_query.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        if not chat.topic_id:
            logger.error(f"–£ —á–∞—Ç–∞ {chat_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç topic_id")
            await callback_query.answer("–û—à–∏–±–∫–∞: —Ç–æ–ø–∏–∫ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        success = await db.update_chat_status(chat.id, "active", manager_id=manager_id)
        if not success:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞ {chat.id}")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
            return
        manager = await db.get_user_by_id(manager_id)
        manager_name = manager.name if manager else "–ú–µ–Ω–µ–¥–∂–µ—Ä"
        try:
            await bot.send_message(chat.user_id,
                f"üëã –ö –≤–∞–º –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä {manager_name}. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –Ω–∏–º.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat.user_id}: {e}")
        try:
            await callback_query.message.edit_text(f"‚úÖ –ß–∞—Ç –≤–∑—è—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {manager_name}\n"
                                                   f"–ö–ª–∏–µ–Ω—Ç: {user.name}\n"
                                                   f"ID —á–∞—Ç–∞: {chat.id}", reply_markup=None)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {e}")
        await callback_query.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ —á–∞—Ç", show_alert=True)
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_data: {e}")
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ —á–∞—Ç–∞: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", show_alert=True)


@dp.callback_query(F.data.startswith("closechat_"))
async def handle_close_chat(callback: CallbackQuery):
    manager_id = callback.from_user.id
    if not await db.is_manager(manager_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
    try:
        chat_id = callback.data.split("_")[1]
    except IndexError:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data –¥–ª—è closechat: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.", show_alert=True)
        return
    await callback.answer("–ó–∞–≤–µ—Ä—à–∞—é —á–∞—Ç...")
    chat = await db.get_chat_by_id(chat_id)
    if not chat:
        logger.warning(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–∫—Ä—ã—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç {chat_id}")
        await callback.message.reply("–û—à–∏–±–∫–∞: –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if chat.status == "closed":
        logger.warning(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–∫—Ä—ã—Ç—å —É–∂–µ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç {chat_id}")
        await callback.message.reply("–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç.")
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É —É —Å–æ–æ–±—â–µ–Ω–∏—è {callback.message.message_id}: {e}")
        return
    topic_id = chat.topic_id
    success = await db.update_chat_status(chat_id, "closed", keep_topic_id=True)
    if not success:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞ {chat_id} –Ω–∞ 'closed' –≤ –ë–î")
        await callback.message.reply("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞.")
        return
    await db.reset_chat_manager(chat_id)
    await notify_client_chat_closed(chat.user_id, chat.chat_id)
    await cleanup_chat_files(chat.chat_id)
    if topic_id and MANAGER_GROUP_CHAT_ID:
        try:
            current_name = callback.message.reply_to_message.forum_topic_created.name if callback.message.reply_to_message and callback.message.reply_to_message.forum_topic_created else '–ß–∞—Ç'
            if not current_name.startswith('[–ó–ê–ö–†–´–¢]'):
                await bot.edit_forum_topic(MANAGER_GROUP_CHAT_ID, topic_id,
                    name=current_name.replace('[–ê–ö–¢–ò–í–ï–ù] ', '[–ó–ê–ö–†–´–¢] '))
            logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ {topic_id} –¥–ª—è —á–∞—Ç–∞ {chat_id} –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π")
            await bot.send_message(MANAGER_GROUP_CHAT_ID, f"‚úÖ –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.full_name}.",
                message_thread_id=topic_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞ {topic_id}: {e}")
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É —É —Å–æ–æ–±—â–µ–Ω–∏—è {callback.message.message_id}: {e}")
    logger.info(f"–ß–∞—Ç {chat_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {manager_id}.")
    await callback.message.reply(f"‚úÖ –ß–∞—Ç {chat_id} –∑–∞–≤–µ—Ä—à–µ–Ω.")


async def notify_managers_new_request(user: db.User, chat: db.Chat, first_message: str, topic_id: int) -> bool:
    if not MANAGER_GROUP_CHAT_ID:
        logger.error("MANAGER_GROUP_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}")
        try:
            await bot.edit_forum_topic(MANAGER_GROUP_CHAT_ID, topic_id,
                name=f"[–ê–ö–¢–ò–í–ï–ù] {user.user_name} (ID: {user.user_id})")
            logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ {topic_id} –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ {topic_id}: {e}")
        await send_history_to_topic(topic_id, chat.chat_id)
        message = (f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞!\n\n"
                   f"üìù –¢–µ–º–∞: {f'[–ê–ö–¢–ò–í–ï–ù] {user.user_name} (ID: {user.user_id})'}\n"
                   f"üë§ –ö–ª–∏–µ–Ω—Ç: @{user.user_name}\n" + (f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n" if user.phone else "") + (
                       f"üìå –ò—Å—Ç–æ—á–Ω–∏–∫: {user.source}\n" if user.source else "") + f"üåê –Ø–∑—ã–∫: {user.language}\n"
                                                                                f"üí∞ –í–∞–ª—é—Ç–∞: {user.currency}\n"
                                                                                f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {first_message}\n\n"
                                                                                f"üÜî ID —á–∞—Ç–∞: {chat.chat_id}\n"
                                                                                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data=f"closechat_{chat.chat_id}")]])
        await bot.send_message(chat_id=MANAGER_GROUP_CHAT_ID, text=message, reply_markup=keyboard,
            message_thread_id=topic_id)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º: {e}")
        return False


async def handle_request_manager(message: types.Message):
    try:
        chat = await db.get_chat_by_id(message.chat.id)
        if not chat or chat.status == "closed":
            logger.error(f"–ß–∞—Ç {message.chat.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç")
            await message.reply("–û—à–∏–±–∫–∞: —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç.")
            return
        user = await db.get_user_by_id(message.from_user.id)
        if not user:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await message.reply("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        topic = await create_manager_chat_topic(user, chat)
        if not topic:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ø–∏–∫ –¥–ª—è —á–∞—Ç–∞ {chat.id}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        success = await db.update_chat_status(chat.id, "manager_requested", topic_id=topic.message_thread_id)
        if not success:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞ {chat.id} –≤ –ë–î")
            try:
                await bot.delete_forum_topic(MANAGER_GROUP_CHAT_ID, topic.message_thread_id)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–ø–∏–∫ {topic.message_thread_id} –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        success = await notify_managers_new_request(user, chat, message.text, topic.message_thread_id)
        if not success:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –¥–ª—è —á–∞—Ç–∞ {chat.id}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        await message.reply("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def check_and_send_reminders():
    try:
        active_chats = await db.get_active_chats()
        if not active_chats:
            return
        for chat in active_chats:
            if chat.status == "active" and chat.topic_id:
                last_message = await db.get_last_message(chat.chat_id)
                if not last_message:
                    continue
                if str(last_message.sender_id).isdigit() and await db.is_manager(int(last_message.sender_id)):
                    time_since_last_message = datetime.now(timezone.utc) - last_message.timestamp.replace(
                        tzinfo=timezone.utc)
                    if time_since_last_message > timedelta(hours=12):
                        await send_message_with_rate_limit(MANAGER_GROUP_CHAT_ID,
                            "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–∏–∞–ª–æ–≥ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞.",
                            message_thread_id=chat.topic_id)
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat.chat_id} –≤ —Ç–æ–ø–∏–∫ {chat.topic_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")


async def run_bot():
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")

    async def reminder_checker():
        while True:
            now = datetime.now(timezone.utc)
            if now.hour == 9 and now.minute == 0:
                await check_and_send_reminders()
            await asyncio.sleep(60)

    asyncio.create_task(reminder_checker())
    await dp.start_polling(bot)
