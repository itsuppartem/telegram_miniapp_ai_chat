const tg = window.Telegram.WebApp;
tg.expand(); // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º Web App –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω

const messages = document.getElementById('messages');
const form = document.getElementById('form');
const input = document.getElementById('input');
const buttonContainer = document.getElementById('button-container');
const satisfiedBtn = document.getElementById('satisfied-btn');
const operatorBtn = document.getElementById('operator-btn');
const newChatButtonContainer = document.getElementById('new-chat-button-container');
const newChatBtn = document.getElementById('new-chat-btn');
const fileInput = document.getElementById('file-input');
const uploadBtn = document.getElementById('upload-btn');
const keyboardToggle = document.getElementById('keyboard-toggle');

let ws = null;
let currentChatId = null;
let userId = null;
let userName = null;
let selectedFile = null;
let isKeyboardVisible = false;
let keyboardTimeout;
let inputTimeout;
let lastWindowHeight = window.innerHeight;
let lastSentMessage = null;
let isSubmitting = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫

function addMessage(senderType, text, timestamp = new Date().toISOString(), senderId = '', media = null) {
    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ –º–µ–¥–∏–∞, –Ω–µ —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!text && !media) return;

    const item = document.createElement('li');
    item.classList.add(senderType);

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (media) {
        const mediaContainer = document.createElement('div');
        mediaContainer.classList.add('media-container');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º file_id –∫–∞–∫ –µ—Å—Ç—å
        const filePath = media.file_id;
        
        switch (media.type) {
            case 'photo':
                const img = document.createElement('img');
                img.src = `/api/media/${filePath}`;
                img.alt = media.caption || '–§–æ—Ç–æ';
                img.loading = 'lazy';
                img.style.cursor = 'pointer';
                img.addEventListener('click', () => openMediaModal(media));
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                img.onload = () => scrollToLastMessage();
                mediaContainer.appendChild(img);
                break;
            case 'video':
                const video = document.createElement('video');
                video.src = `/api/media/${filePath}`;
                video.controls = true;
                video.preload = 'metadata';
                video.style.cursor = 'default';
                mediaContainer.appendChild(video);
                break;
            case 'voice':
                const audio = document.createElement('audio');
                audio.src = `/api/media/${filePath}`;
                audio.controls = true;
                audio.preload = 'metadata';
                audio.addEventListener('click', () => openMediaModal(media));
                mediaContainer.appendChild(audio);
                break;
            case 'video_note':
                const videoNote = document.createElement('video');
                videoNote.src = `/api/media/${filePath}`;
                videoNote.controls = true;
                videoNote.preload = 'metadata';
                videoNote.style.maxWidth = '200px';
                videoNote.style.maxHeight = '200px';
                videoNote.style.cursor = 'default';
                mediaContainer.appendChild(videoNote);
                break;
            case 'document':
                const docLink = document.createElement('a');
                docLink.href = `/api/media/${filePath}`;
                docLink.textContent = media.caption || 'üìÑ –î–æ–∫—É–º–µ–Ω—Ç';
                docLink.target = '_blank';
                docLink.style.display = 'block';
                docLink.style.margin = '5px 0';
                docLink.style.cursor = 'pointer';
                docLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    openMediaModal(media);
                });
                mediaContainer.appendChild(docLink);
                break;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –º–µ–¥–∏–∞, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
        if (text && media.type !== 'document') {
            const caption = document.createElement('div');
            caption.classList.add('media-caption');
            caption.textContent = text;
            mediaContainer.appendChild(caption);
        }

        item.appendChild(mediaContainer);
    } else if (text) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞
        const textNode = document.createElement('span');
        textNode.textContent = text;
        item.appendChild(textNode);
    }

    const timeNode = document.createElement('small');
    const date = new Date(timestamp);
    timeNode.textContent = `${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
    if (senderId) {
        timeNode.textContent += ` (${senderId})`;
    }
    item.appendChild(timeNode);

    messages.appendChild(item);
    scrollToLastMessage();
}

function showButtons(show = true) {
    buttonContainer.style.display = show ? 'block' : 'none';
}

function showNewChatButton(show = true) {
    newChatButtonContainer.style.display = show ? 'block' : 'none';
    form.style.display = show ? 'none' : 'flex'; // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞, –µ—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç"
}

function connectWebSocket() {
    // –ü–æ–ª—É—á–∞–µ–º user_id –∏ user_name –∏–∑ Telegram Web App InitData
    if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
        userId = tg.initDataUnsafe.user.id;
        userName = tg.initDataUnsafe.user.first_name;
        console.log("User ID:", userId, "User Name:", userName);
    } else {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram Web App");
        addMessage('system', '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —á–∞—Ç –∏–∑ Telegram.');
        return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è WebSocket —Å InitData
    const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const wsUrl = `${wsProtocol}//${window.location.host}/ws?initData=${encodeURIComponent(tg.initData)}`;
    console.log("Connecting to WebSocket:", wsUrl);

    ws = new WebSocket(wsUrl);

    ws.onopen = function(event) {
        console.log("WebSocket connection opened");
        addMessage('system', '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.');
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ (—Å–µ—Ä–≤–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç init)
    };

    ws.onmessage = function(event) {
        console.log("Message from server:", event.data);
        try {
            const data = JSON.parse(event.data);
            handleServerMessage(data);
        } catch (e) {
            console.error("Failed to parse message or handle:", e);
            addMessage('system', '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.');
        }
    };

    ws.onerror = function(event) {
        console.error("WebSocket error observed:", event);
        addMessage('system', '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    };

    ws.onclose = function(event) {
        console.log("WebSocket connection closed:", event);
        addMessage('system', `–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ (–∫–æ–¥: ${event.code}). ${event.reason || ''} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.`);
        ws = null; // –°–±—Ä–æ—Å–∏—Ç—å –æ–±—ä–µ–∫—Ç WebSocket
        showButtons(false);
        showNewChatButton(false);
        form.style.display = 'none'; // –°–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞ –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ
    };
}

function handleServerMessage(data) {
    if (!data || !data.type || !data.payload) {
        console.warn("Received invalid message structure:", data);
        return;
    }
    const payload = data.payload;

    // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º currentChatId, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—à–µ–ª –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if (payload.chat_id) {
        currentChatId = payload.chat_id;
        console.log("Current Chat ID updated:", currentChatId);
    }

    switch (data.type) {
        case 'init':
            messages.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            addMessage('system', '–ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞—à —Ä–æ–±–æ—Ç –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ï—Å–ª–∏ –≤—ã –±—É–¥–µ—Ç–µ –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω—ã –æ—Ç–≤–µ—Ç–æ–º, –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–æ–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.');
            if (payload.history && payload.history.length > 0) {
                // –û—Ç–∫–ª—é—á–∞–µ–º –ø–ª–∞–≤–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
                payload.history.forEach((msg, index) => {
                    let senderType = 'system'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if (String(msg.sender_id) === String(userId)) {
                        senderType = 'client';
                    } else if (msg.sender_id === 'ai') {
                        senderType = 'ai';
                    } else if (String(msg.sender_id).match(/^\d+$/)) {
                        senderType = 'manager';
                    }
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞–≤–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    addMessage(senderType, msg.text, msg.timestamp, msg.sender_id, msg.media);
                });
            }
            showButtons(payload.show_buttons || false);
            showNewChatButton(false);
            form.style.display = 'flex';
            input.disabled = false;
            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–Ω–æ
            setTimeout(() => scrollToLastMessage(true), 100);
            break;
        case 'message':
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            let senderType;
            if (String(payload.sender_id) === String(userId)) {
                senderType = 'client';
            } else if (payload.sender_id === 'ai') {
                senderType = 'ai';
            } else if (String(payload.sender_id).match(/^\d+$/)) {
                senderType = 'manager';
            } else {
                senderType = 'system';
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–º —Ñ–∞–π–ª–∞
            if (payload.media && lastSentMessage && payload.media.file_id === `${currentChatId}/${selectedFile?.name}`) {
                console.log("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º");
                return;
            }
            
            addMessage(senderType, payload.text, payload.timestamp, payload.sender_id, payload.media);
            break;
        case 'ai_response':
            addMessage('ai', payload.text, payload.timestamp, 'AI');
            if (payload.show_buttons) {
                showButtons(true);
            }
            break;
        case 'status_update':
            addMessage('system', payload.message);
            if (payload.new_chat_id) {
                currentChatId = payload.new_chat_id;
                console.log("Switched to new chat ID:", currentChatId);
            }
            if (payload.status === 'closed') {
                showButtons(false);
                showNewChatButton(payload.show_new_chat_button);
                input.disabled = true;
            }
            break;
        case 'error':
            addMessage('system', `–û—à–∏–±–∫–∞: ${payload.message}`);
            if (payload.show_operator_button) {
                showButtons(true);
                satisfiedBtn.style.display = 'none';
            }
            if (payload.show_new_chat_button) {
                showNewChatButton(true);
            }
            break;
        default:
            console.warn("Unknown message type:", data.type);
    }
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
uploadBtn.addEventListener('click', function() {
    fileInput.click();
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è drag-and-drop
form.addEventListener('dragover', function(e) {
    e.preventDefault();
    e.stopPropagation();
    form.style.border = '2px dashed #0088cc';
});

form.addEventListener('dragleave', function(e) {
    e.preventDefault();
    e.stopPropagation();
    form.style.border = 'none';
});

form.addEventListener('drop', function(e) {
    e.preventDefault();
    e.stopPropagation();
    form.style.border = 'none';
    
    if (e.dataTransfer.files.length > 0) {
        selectedFile = e.dataTransfer.files[0];
        uploadBtn.title = `–§–∞–π–ª: ${selectedFile.name}`;
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        form.dispatchEvent(new Event('submit'));
    }
});

// –£–ª—É—á—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
fileInput.addEventListener('change', function(e) {
    if (e.target.files.length > 0) {
        selectedFile = e.target.files[0];
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if (selectedFile.size > 250 * 1024 * 1024) { // 250MB
            addMessage('system', '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 250MB');
            selectedFile = null;
            fileInput.value = '';
            uploadBtn.title = '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª';
            return;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        const allowedTypes = [
            'image/jpeg', 'image/png', 'image/gif', 
            'application/pdf', 'application/msword', 
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'application/vnd.ms-excel',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'text/plain',
            'video/quicktime',
            'video/mp4'
        ];
        if (!allowedTypes.includes(selectedFile.type)) {
            addMessage('system', '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞');
            selectedFile = null;
            fileInput.value = '';
            uploadBtn.title = '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª';
            return;
        }
        uploadBtn.title = `–§–∞–π–ª: ${selectedFile.name}`;
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        form.dispatchEvent(new Event('submit'));
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ input –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
fileInput.addEventListener('input', function(e) {
    if (e.target.files.length > 0) {
        selectedFile = e.target.files[0];
        uploadBtn.title = `–§–∞–π–ª: ${selectedFile.name}`;
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        form.dispatchEvent(new Event('submit'));
    }
});

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
form.addEventListener('submit', function(e) {
    e.preventDefault();
    if (isSubmitting) {
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return;
    }
    isSubmitting = true;

    if (isKeyboardVisible) {
        input.blur();
        keyboardToggle.classList.remove('visible');
        keyboardToggle.classList.remove('active');
        isKeyboardVisible = false;
    }
    if (!ws || ws.readyState !== WebSocket.OPEN) {
        addMessage('system', '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.');
        isSubmitting = false;
        return;
    }

    if ((input.value || selectedFile) && !input.disabled) {
        const message = {
            type: 'message',
            payload: {
                text: input.value || '',
                file: selectedFile ? {
                    name: selectedFile.name,
                    type: selectedFile.type,
                    size: selectedFile.size
                } : null
            }
        };

        if (selectedFile) {
            if (!currentChatId) {
                addMessage('system', '–û—à–∏–±–∫–∞: –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã. –í—ã —Å–º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –ø–æ–∑–≤–∞–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.');
                isSubmitting = false;
                return;
            }

            const formData = new FormData();
            formData.append('file', selectedFile);
            const uploadUrl = `/upload?chat_id=${currentChatId}&message=${encodeURIComponent(JSON.stringify(message))}&sender_id=${userId}`;

            fetch(uploadUrl, {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => {
                        throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${text}`);
                    });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    message.payload.chat_id = currentChatId;
                    ws.send(JSON.stringify(message));
                    
                    selectedFile = null;
                    fileInput.value = '';
                    uploadBtn.title = '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª';
                } else {
                    addMessage('system', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' + (data.detail || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
                }
            })
            .catch(error => {
                addMessage('system', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' + error.message);
            })
            .finally(() => {
                isSubmitting = false; // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            });
        } else {
            message.payload.chat_id = currentChatId;
            lastSentMessage = {
                text: input.value,
                sender_id: userId,
                timestamp: Date.now()
            };
            ws.send(JSON.stringify(message));
            addMessage('client', input.value, new Date().toISOString(), userId);
            input.value = '';
            showButtons(false);
            isSubmitting = false;
        }
    } else {
        isSubmitting = false;
    }
});

satisfiedBtn.addEventListener('click', function() {
    if (!currentChatId) return;
    console.log("Satisfied button clicked for chat:", currentChatId);
    fetch(`/chat/${currentChatId}/feedback`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'satisfied' })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`Server error: ${response.statusText}`);
        }
        return response.json();
    })
    .then(data => {
        console.log('Feedback response:', data);
        // –°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å–ª–∞—Ç—å 'status_update' —á–µ—Ä–µ–∑ WS –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        showButtons(false); // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ä–∞–∑—É
    })
    .catch(error => {
        console.error('Error sending feedback:', error);
        addMessage('system', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.');
    });
});

operatorBtn.addEventListener('click', function() {
    if (!currentChatId) return;
    console.log("Operator button clicked for chat:", currentChatId);
    fetch(`/chat/${currentChatId}/request_manager`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({}) // –¢–µ–ª–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
    })
    .then(response => {
        if (!response.ok) {
            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            return response.text().then(text => {
                throw new Error(`Server error: ${response.status} ${response.statusText} - ${text}`);
            });
        }
        return response.json();
    })
    .then(data => {
        console.log('Request manager response:', data);
        // –°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å–ª–∞—Ç—å 'status_update' —á–µ—Ä–µ–∑ WS –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        showButtons(false); // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ä–∞–∑—É
    })
    .catch(error => {
        console.error('Error requesting manager:', error);
        addMessage('system', `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: ${error.message}`);
    });
});

newChatBtn.addEventListener('click', function() {
    if (!ws || ws.readyState !== WebSocket.OPEN) {
        addMessage('system', '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.');
        return;
    }
    console.log("New chat button clicked");
    const message = {
        type: 'start_new_chat',
        payload: {}
    };
    ws.send(JSON.stringify(message));
    messages.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    addMessage('system', '–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —á–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
    showNewChatButton(false); // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç"
    form.style.display = 'flex'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞
    input.disabled = false;
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    keyboardToggle.classList.remove('visible');
    keyboardToggle.classList.remove('active');
    isKeyboardVisible = false;
    lastWindowHeight = window.innerHeight;
});

// –°–ª—É—à–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
input.addEventListener('focus', function() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
    keyboardToggle.classList.add('visible');
    keyboardToggle.classList.add('active');
    isKeyboardVisible = true;
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ–ª—é –≤–≤–æ–¥–∞ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
    setTimeout(() => {
        input.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }, 100);
});

// –°–ª—É—à–∞–µ–º –ø–æ—Ç–µ—Ä—é —Ñ–æ–∫—É—Å–∞
input.addEventListener('blur', function() {
    clearTimeout(keyboardTimeout);
    keyboardTimeout = setTimeout(function() {
        keyboardToggle.classList.remove('visible');
        keyboardToggle.classList.remove('active');
        isKeyboardVisible = false;
    }, 100);
});

// –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è/—Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
window.addEventListener('resize', function() {
    clearTimeout(keyboardTimeout);
    keyboardTimeout = setTimeout(function() {
        const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        const currentWindowHeight = window.innerHeight;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –≤—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞ (–ø—Ä–∏–∑–Ω–∞–∫ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
        const keyboardIsVisible = currentWindowHeight < lastWindowHeight;
        lastWindowHeight = currentWindowHeight;
        
        if (isMobile && keyboardIsVisible && input === document.activeElement) {
            keyboardToggle.classList.add('visible');
            keyboardToggle.classList.add('active');
            isKeyboardVisible = true;
        } else {
            keyboardToggle.classList.remove('visible');
            keyboardToggle.classList.remove('active');
            isKeyboardVisible = false;
        }
    }, 100);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function isIOS() {
    return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
function getFileExtension(media) {
    // –ï—Å–ª–∏ file_id —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    if (media.file_id && media.file_id.includes('.')) {
        return '';
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, –±–µ—Ä–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑ –Ω–µ–≥–æ
    if (media.caption && media.caption.includes('.')) {
        return '.' + media.caption.split('.').pop().toLowerCase();
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ mime_type
    const mimeToExt = {
        'image/jpeg': '.jpg',
        'image/png': '.png',
        'image/gif': '.gif',
        'video/mp4': '.mp4',
        'video/quicktime': '.mov',
        'video/x-msvideo': '.avi',
        'application/pdf': '.pdf',
        'application/msword': '.doc',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
        'application/vnd.ms-excel': '.xls',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': '.xlsx',
        'text/plain': '.txt',
        'audio/mpeg': '.mp3',
        'audio/wav': '.wav',
        'audio/ogg': '.ogg'
    };
    
    return mimeToExt[media.mime_type] || '';
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
function openMediaModal(media) {
    const modal = document.getElementById('media-modal');
    const modalImage = document.getElementById('modal-image');
    const modalVideo = document.getElementById('modal-video');
    const modalAudio = document.getElementById('modal-audio');
    const modalDownload = document.getElementById('modal-download');
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    modalImage.style.display = 'none';
    modalVideo.style.display = 'none';
    modalAudio.style.display = 'none';
    modalDownload.style.display = 'none';
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const fileExt = getFileExtension(media);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ file_id
    const fileUrl = `/api/media/${media.file_id}${fileExt}`;
    modalDownload.href = fileUrl;
    
    // –î–ª—è iOS –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ, –¥–ª—è –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - —Å–∫–∞—á–∏–≤–∞–µ–º
    if (isIOS()) {
        modalDownload.removeAttribute('download');
        modalDownload.target = '_blank';
        modalDownload.textContent = '–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª';
    } else {
        modalDownload.setAttribute('download', media.caption || 'file');
        modalDownload.removeAttribute('target');
        modalDownload.textContent = '–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª';
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–µ–¥–∏–∞
    switch (media.type) {
        case 'photo':
            modalImage.src = fileUrl;
            modalImage.style.display = 'block';
            modalDownload.style.display = 'block';
            break;
        case 'video':
        case 'video_note':
            modalVideo.src = fileUrl;
            modalVideo.style.display = 'block';
            modalDownload.style.display = 'none';
            break;
        case 'voice':
        case 'audio':
            modalAudio.src = fileUrl;
            modalAudio.style.display = 'block';
            modalDownload.style.display = 'block';
            break;
        case 'document':
            modalDownload.style.display = 'block';
            break;
    }
    
    modal.style.display = 'block';
}

function closeMediaModal() {
    const modal = document.getElementById('media-modal');
    const modalVideo = document.getElementById('modal-video');
    const modalAudio = document.getElementById('modal-audio');
    
    modal.style.display = 'none';
    modalVideo.pause();
    modalAudio.pause();
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
document.addEventListener('DOMContentLoaded', function() {
    const modal = document.getElementById('media-modal');
    const closeBtn = document.querySelector('.media-modal-close');
    
    closeBtn.addEventListener('click', closeMediaModal);
    
    window.addEventListener('click', function(event) {
        if (event.target === modal) {
            closeMediaModal();
        }
    });
});

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
function scrollToLastMessage(smooth = true) {
    const lastMessage = messages.lastElementChild;
    if (lastMessage) {
        lastMessage.scrollIntoView({ 
            behavior: smooth ? 'smooth' : 'auto', 
            block: 'end'
        });
    } else {
        messages.scrollTop = messages.scrollHeight;
    }
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
// –î–æ–∂–∏–¥–∞–µ–º—Å—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Telegram Web App API
tg.ready();
// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
connectWebSocket();